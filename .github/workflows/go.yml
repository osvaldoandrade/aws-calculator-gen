name: CI, Tag & Release - itransform-cli

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  APP_NAME: itransform-cli
  BIN_NAME: itransform-cli
  APP_DISPLAY: "iTransform CLI"
  BUNDLE_ID: com.itransform.cli
  VOL_NAME: "iTransform CLI"

jobs:
  build-test:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build
        run: cargo build --release --verbose
      - name: Test
        run: cargo test --verbose

  tag:
    name: Compute & Push Tag
    runs-on: ubuntu-latest
    needs: build-test
    outputs:
      TAG_NAME: ${{ steps.version.outputs.tag }}
      VERSION: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        name: Compute next tag (patch bump)
        shell: bash
        run: |
          git fetch --tags
          LATEST_TAG="$(git tag --list 'v*' --sort=-v:refname | head -n1)"
          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="v0.1.0"
          else
            V="${LATEST_TAG#v}"
            IFS='.' read -r MA MI PA <<< "$V"
            : "${MA:=0}"; : "${MI:=1}"; : "${PA:=0}"
            PA=$((PA+1))
            NEXT_TAG="v${MA}.${MI}.${PA}"
          fi
          echo "tag=${NEXT_TAG}"       >> "$GITHUB_OUTPUT"
          echo "version=${NEXT_TAG#v}" >> "$GITHUB_OUTPUT"
      - name: Create and push git tag
        shell: bash
        run: |
          TAG_NAME="${{ steps.version.outputs.tag }}"
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} já existe; seguindo."
          else
            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
            git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
            git push origin "${TAG_NAME}"
          fi

  # === macOS: assina .app, cria/assina DMG, notariza e staple ===
  release-macos:
    name: macOS • DMG drag-to-Applications (Universal, signed + notarized)
    runs-on: macos-latest
    needs: tag
    env:
      VERSION: ${{ needs.tag.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      - name: Build macOS x86_64
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build macOS arm64
        run: cargo build --release --target aarch64-apple-darwin

      - name: Create universal binary
        run: |
          mkdir -p dist
          lipo -create \
            target/x86_64-apple-darwin/release/${BIN_NAME} \
            target/aarch64-apple-darwin/release/${BIN_NAME} \
            -output dist/${BIN_NAME}
          chmod +x dist/${BIN_NAME}

      - name: Create .app bundle
        shell: bash
        run: |
          APP="${APP_DISPLAY}.app"
          mkdir -p "$APP/Contents/MacOS" "$APP/Contents/Resources"
          cat > "$APP/Contents/Info.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleDevelopmentRegion</key><string>en</string>
            <key>CFBundleDisplayName</key><string>${APP_DISPLAY}</string>
            <key>CFBundleExecutable</key><string>launcher</string>
            <key>CFBundleIdentifier</key><string>${BUNDLE_ID}.${APP_NAME}</string>
            <key>CFBundleInfoDictionaryVersion</key><string>6.0</string>
            <key>CFBundleName</key><string>${APP_DISPLAY}</string>
            <key>CFBundlePackageType</key><string>APPL</string>
            <key>CFBundleShortVersionString</key><string>${VERSION}</string>
            <key>CFBundleVersion</key><string>${VERSION}</string>
            <key>LSMinimumSystemVersion</key><string>11.0</string>
            <key>LSApplicationCategoryType</key><string>public.app-category.developer-tools</string>
          </dict></plist>
          PLIST

          cat > "$APP/Contents/MacOS/launcher" <<'SH'
          #!/bin/bash
          set -euo pipefail
          BIN_SRC="$(dirname "$0")/../Resources/__APP_NAME__"
          TARGET_DIR="/usr/local/bin"
          TARGET_BIN="${TARGET_DIR}/__APP_NAME__"
          /usr/bin/osascript <<OSA
          do shell script "mkdir -p '${TARGET_DIR}' && install -m 0755 '${BIN_SRC}' '${TARGET_BIN}' && xattr -d com.apple.quarantine '${TARGET_BIN}' || true" with administrator privileges
          OSA
          /usr/bin/osascript -e 'display dialog "__APP_DISPLAY__ instalado em ${TARGET_BIN}." buttons {"OK"} default button 1 with icon note'
          SH
          sed -i '' -e "s/__APP_NAME__/${APP_NAME}/g" -e "s/__APP_DISPLAY__/${APP_DISPLAY}/g" "$APP/Contents/MacOS/launcher"
          chmod +x "$APP/Contents/MacOS/launcher"
          cp dist/${APP_NAME} "$APP/Contents/Resources/${APP_NAME}"

      - name: Import Developer ID cert
        shell: bash
        env:
          P12_B64: ${{ secrets.APPLE_DEV_ID_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_DEV_ID_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${P12_B64:-}" ]; then
            echo "::error::Secret APPLE_DEV_ID_P12_BASE64 ausente"; exit 1; fi
          printf '%s' "$P12_B64" | base64 --decode > /tmp/dev_id.p12 2>/dev/null || \
          printf '%s' "$P12_B64" | base64 -d        > /tmp/dev_id.p12 2>/dev/null || \
          printf '%s' "$P12_B64" | /usr/bin/base64 -D > /tmp/dev_id.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import /tmp/dev_id.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security list-keychains -d user -s build.keychain login.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
      - name: Debug signing identities
        run: security find-identity -v -p codesigning build.keychain || true

      - name: Codesign .app (Developer ID + Hardened Runtime)
        env:
          SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
        run: |
          set -euo pipefail
          APP="${APP_DISPLAY}.app"
          codesign --force --deep --options runtime --timestamp \
                   --sign "$SIGNING_IDENTITY" "$APP"
          echo "Verifying .app signature (strict/deep)…"
          codesign --verify --deep --strict --verbose=2 "$APP"
          echo "Gatekeeper assess .app (may warn before notarization)…"
          spctl --assess --type execute -vv "$APP" || true
          echo "Entitlements (for debug):"
          codesign -d --entitlements :- "$APP" || true

      - name: Create DMG (drag-to-Applications)
        run: |
          set -euo pipefail
          APP="${APP_DISPLAY}.app"
          mkdir -p dmgroot
          cp -R "$APP" dmgroot/
          DMG="dist/${APP_NAME}_${VERSION}_macOS.dmg"
          hdiutil create -volname "${VOL_NAME}" -srcfolder dmgroot -ov -format UDZO "$DMG"
          echo "DMG_PATH=$DMG" >> $GITHUB_ENV

      - name: Codesign DMG (Developer ID)
        env:
          SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
        run: |
          set -euo pipefail
          codesign --force --timestamp --sign "$SIGNING_IDENTITY" "$DMG_PATH"
          echo "Verifying DMG signature…"
          codesign --verify --strict --verbose=2 "$DMG_PATH"
          echo "Gatekeeper assess DMG (expected to warn before notarization)…"
          spctl --assess --type open --verbose "$DMG_PATH" || true

      # --- Notarização (com captura de Submission ID e validação) ---
      - name: Sanity check notary secrets
        shell: bash
        env:
          A: ${{ secrets.APPLE_NOTARY_API_KEY_BASE64 }}
          B: ${{ secrets.APPLE_NOTARY_KEY_ID }}
          C: ${{ secrets.APPLE_NOTARY_ISSUER_ID }}
          D: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          for k in A B C D; do
            v="${!k}"; if [ -z "$v" ]; then
              echo "::error::Missing notary secret: $k"; exit 1; fi
          done

      - name: Notarize DMG (submit + wait + capture ID)
        id: notarize
        env:
          NOTARY_KEY_B64: ${{ secrets.APPLE_NOTARY_API_KEY_BASE64 }}
          NOTARY_KEY_ID: ${{ secrets.APPLE_NOTARY_KEY_ID }}
          NOTARY_ISSUER_ID: ${{ secrets.APPLE_NOTARY_ISSUER_ID }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          KEY_PATH="/tmp/AuthKey_${NOTARY_KEY_ID}.p8"
          printf '%s' "$NOTARY_KEY_B64" | base64 --decode > "$KEY_PATH" 2>/dev/null || \
          printf '%s' "$NOTARY_KEY_B64" | base64 -d        > "$KEY_PATH" 2>/dev/null || \
          printf '%s' "$NOTARY_KEY_B64" | /usr/bin/base64 -D > "$KEY_PATH"

          echo "Submitting to notarytool (with --wait)…"
          RESULT_JSON="$(xcrun notarytool submit "$DMG_PATH" \
            --key "$KEY_PATH" \
            --key-id "$NOTARY_KEY_ID" \
            --issuer "$NOTARY_ISSUER_ID" \
            --team-id "$TEAM_ID" \
            --wait \
            --output-format json)"
          echo "$RESULT_JSON"

          STATUS="$(python3 -c 'import sys,json;print((json.loads(sys.stdin.read()).get("status") or "").lower())' <<< "$RESULT_JSON")"
          ID="$(python3 -c 'import sys,json;print(json.loads(sys.stdin.read()).get("id",""))' <<< "$RESULT_JSON")"

          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "submission_id=$ID" >> "$GITHUB_OUTPUT"
          if [ "$STATUS" != "accepted" ]; then
            echo "::error::Notarization status: $STATUS (Submission ID: $ID)"; exit 1
          fi

      - name: Confirm Accepted on server (info)
        env:
          NOTARY_KEY_B64: ${{ secrets.APPLE_NOTARY_API_KEY_BASE64 }}
          NOTARY_KEY_ID: ${{ secrets.APPLE_NOTARY_KEY_ID }}
          NOTARY_ISSUER_ID: ${{ secrets.APPLE_NOTARY_ISSUER_ID }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SUBMISSION_ID: ${{ steps.notarize.outputs.submission_id }}
        run: |
          set -euo pipefail
          KEY_PATH="/tmp/AuthKey_${NOTARY_KEY_ID}.p8"
          printf '%s' "$NOTARY_KEY_B64" | base64 --decode > "$KEY_PATH" 2>/dev/null || true
          xcrun notarytool info "$SUBMISSION_ID" \
            --key "$KEY_PATH" --key-id "$NOTARY_KEY_ID" --issuer "$NOTARY_ISSUER_ID" \
            --team-id "$TEAM_ID" --output-format json || true

      - name: Wait for ticket propagation
        run: |
          echo "Sleeping 30s to allow ticket propagation…"
          sleep 30

      - name: Staple ticket (retry)
        run: |
          set -euo pipefail
          ATTEMPTS=5
          for i in $(seq 1 $ATTEMPTS); do
            echo "Stapler attempt $i…"
            if xcrun stapler staple -v "$DMG_PATH"; then
              break
            fi
            echo "Stapler failed; sleeping 15s…"
            sleep 15
          done
          echo "Validate stapled DMG:"
          xcrun stapler validate "$DMG_PATH"
          echo "Gatekeeper assess DMG after staple:"
          spctl --assess --type open --verbose "$DMG_PATH" || true

      - name: Checksums + Upload
        run: |
          shasum -a 256 "$DMG_PATH" > "${DMG_PATH}.sha256"
          cat "${DMG_PATH}.sha256"
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.TAG_NAME }}
          name: ${{ needs.tag.outputs.TAG_NAME }}
          generate_release_notes: true
          files: |
            ${{ env.DMG_PATH }}
            ${{ env.DMG_PATH }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-linux-rpm:
    name: Linux • RPM (x86_64 & aarch64)
    runs-on: ubuntu-latest
    needs: tag
    env:
      VERSION: ${{ needs.tag.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu
      - name: Install cross toolchain and fpm deps
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu ruby ruby-dev rubygems rpm
          sudo gem install --no-document fpm
      - name: Build linux x86_64
        run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Build linux aarch64
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target aarch64-unknown-linux-gnu
      - name: Package RPMs
        run: |
          mkdir -p dist pkg/linux/amd64/usr/local/bin pkg/linux/aarch64/usr/local/bin
          install -m 0755 target/x86_64-unknown-linux-gnu/release/${BIN_NAME} pkg/linux/amd64/usr/local/bin/${APP_NAME}
          install -m 0755 target/aarch64-unknown-linux-gnu/release/${BIN_NAME} pkg/linux/aarch64/usr/local/bin/${APP_NAME}
          fpm -s dir -t rpm -n ${APP_NAME} -v ${VERSION} -a x86_64 --license MIT \
            --description "${APP_DISPLAY}" --vendor "${{ github.repository_owner }}" \
            --url "https://github.com/${{ github.repository }}" \
            -C pkg/linux/amd64 usr/local/bin
          fpm -s dir -t rpm -n ${APP_NAME} -v ${VERSION} -a aarch64 --license MIT \
            --description "${APP_DISPLAY}" --vendor "${{ github.repository_owner }}" \
            --url "https://github.com/${{ github.repository }}" \
            -C pkg/linux/aarch64 usr/local/bin
          mv ${APP_NAME}-${VERSION}-1.x86_64.rpm dist/${APP_NAME}_${VERSION}_linux_x86_64.rpm
          mv ${APP_NAME}-${VERSION}-1.aarch64.rpm dist/${APP_NAME}_${VERSION}_linux_aarch64.rpm
          (cd dist && shasum -a 256 *.rpm > SHA256SUMS.rpm.txt)
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.TAG_NAME }}
          name: ${{ needs.tag.outputs.TAG_NAME }}
          files: |
            dist/${{ env.APP_NAME }}_${{ env.VERSION }}_linux_x86_64.rpm
            dist/${{ env.APP_NAME }}_${{ env.VERSION }}_linux_aarch64.rpm
            dist/SHA256SUMS.rpm.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-linux-deb:
    name: Linux • DEB (amd64 & arm64)
    runs-on: ubuntu-latest
    needs: tag
    env:
      VERSION: ${{ needs.tag.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu
      - name: Install cross toolchain and fpm deps
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm
      - name: Build linux x86_64
        run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Build linux aarch64
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target aarch64-unknown-linux-gnu
      - name: Package DEBs
        run: |
          mkdir -p dist pkg/deb/amd64/usr/local/bin pkg/deb/arm64/usr/local/bin
          install -m 0755 target/x86_64-unknown-linux-gnu/release/${BIN_NAME} pkg/deb/amd64/usr/local/bin/${APP_NAME}
          install -m 0755 target/aarch64-unknown-linux-gnu/release/${BIN_NAME} pkg/deb/arm64/usr/local/bin/${APP_NAME}
          fpm -s dir -t deb -n ${APP_NAME} -v ${VERSION} -a amd64 --license MIT \
            --description "${APP_DISPLAY}" --vendor "${{ github.repository_owner }}" \
            --url "https://github.com/${{ github.repository }}" \
            -C pkg/deb/amd64 usr/local/bin
          fpm -s dir -t deb -n ${APP_NAME} -v ${VERSION} -a arm64 --license MIT \
            --description "${APP_DISPLAY}" --vendor "${{ github.repository_owner }}" \
            --url "https://github.com/${{ github.repository }}" \
            -C pkg/deb/arm64 usr/local/bin
          mv ${APP_NAME}_${VERSION}_amd64.deb dist/${APP_NAME}_${VERSION}_linux_amd64.deb
          mv ${APP_NAME}_${VERSION}_arm64.deb dist/${APP_NAME}_${VERSION}_linux_arm64.deb
          (cd dist && shasum -a 256 *.deb > SHA256SUMS.deb.txt)
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.TAG_NAME }}
          name: ${{ needs.tag.outputs.TAG_NAME }}
          files: |
            dist/${{ env.APP_NAME }}_${{ env.VERSION }}_linux_amd64.deb
            dist/${{ env.APP_NAME }}_${{ env.VERSION }}_linux_arm64.deb
            dist/SHA256SUMS.deb.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
