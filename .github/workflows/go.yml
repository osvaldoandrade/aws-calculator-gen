name: CI, Tag & Release (Go + macOS DMG)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write   # necessário para criar tag e publicar release

jobs:
  build-test:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  release-macos:
    name: Tag, Build Universal, DMG & Release (macOS)
    # não roda em PRs; roda em push na main ou manual
    if: github.event_name != 'pull_request'
    runs-on: macos-latest
    needs: build-test
    env:
      APP_NAME: seidor-aws-cli
      VOL_NAME: "Seidor AWS CLI"
      MAIN_PKG: ./cmd/seidor-aws-cli      # ajuste se o seu main estiver em outro path
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       # precisamos de todos os tags

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Compute next tag (patch bump)
        id: version
        run: |
          git fetch --tags
          LATEST_TAG="$(git tag --list 'v*' --sort=-v:refname | head -n1)"
          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="v0.1.0"
          else
            V="${LATEST_TAG#v}"
            IFS='.' read -r MA MI PA <<< "$V"
            : "${MA:=0}" ; : "${MI:=1}" ; : "${PA:=0}"
            PA=$((PA+1))
            NEXT_TAG="v${MA}.${MI}.${PA}"
          fi
          echo "latest=$LATEST_TAG"   >> $GITHUB_OUTPUT
          echo "next=$NEXT_TAG"       >> $GITHUB_OUTPUT
          echo "VERSION=${NEXT_TAG#v}" >> $GITHUB_ENV
          echo "TAG_NAME=$NEXT_TAG"    >> $GITHUB_ENV

      - name: Create and push git tag
        run: |
          # Se o tag já existir no remoto, não recria
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} já existe em origin; seguindo adiante."
          else
            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
            git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
            git push origin "${TAG_NAME}"
          fi

      - name: Build darwin/amd64
        env:
          GOOS: darwin
          GOARCH: amd64
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -trimpath -ldflags="-s -w -X main.version=${VERSION}" -o dist/${APP_NAME}_amd64 ${MAIN_PKG}

      - name: Build darwin/arm64
        env:
          GOOS: darwin
          GOARCH: arm64
          CGO_ENABLED: 0
        run: |
          go build -trimpath -ldflags="-s -w -X main.version=${VERSION}" -o dist/${APP_NAME}_arm64 ${MAIN_PKG}

      - name: Create universal binary (lipo)
        run: |
          lipo -create -output dist/${APP_NAME} dist/${APP_NAME}_amd64 dist/${APP_NAME}_arm64
          chmod +x dist/${APP_NAME}
          file dist/${APP_NAME}

      - name: Stage files for DMG
        run: |
          mkdir -p "pkg/${VOL_NAME}"
          cp dist/${APP_NAME} "pkg/${VOL_NAME}/${APP_NAME}"
          [ -f LICENSE ] && cp LICENSE "pkg/${VOL_NAME}/"
          [ -f README.md ] && cp README.md "pkg/${VOL_NAME}/"
          cat > "pkg/${VOL_NAME}/INSTALL.txt" <<'TXT'
          Installation (Terminal):
            1) Open Terminal.
            2) cd /Volumes/Seidor\ AWS\ CLI
            3) sudo install -m 0755 seidor-aws-cli /usr/local/bin/seidor-aws-cli
            4) seidor-aws-cli --help
          Note: App is unsigned. You may need to allow execution (System Settings > Privacy & Security).
          TXT

      - name: Build DMG
        run: |
          DMG="dist/${APP_NAME}_${VERSION}_macOS_universal.dmg"
          hdiutil create -volname "${VOL_NAME}" -srcfolder "pkg/${VOL_NAME}" -ov -format UDZO "$DMG"
          echo "DMG_PATH=$DMG" >> $GITHUB_ENV

      - name: Checksums
        run: |
          shasum -a 256 "$DMG_PATH" > "${DMG_PATH}.sha256"
          cat "${DMG_PATH}.sha256"

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}          # usa o tag recém-criado
          name: ${{ env.TAG_NAME }}
          generate_release_notes: true
          files: |
            ${{ env.DMG_PATH }}
            ${{ env.DMG_PATH }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
