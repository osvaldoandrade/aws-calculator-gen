name: CI, Tag & Multi-Platform Release (DMG drag-app, NSIS EXE, RPM)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  APP_NAME: seidor-aws-cli
  VOL_NAME: "Seidor AWS CLI"
  MAIN_PKG: ./cmd/seidor-aws-cli

jobs:
  build-test:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -v ./...

  tag:
    name: Compute & Push Tag
    runs-on: ubuntu-latest
    needs: build-test
    outputs:
      TAG_NAME: ${{ steps.version.outputs.tag }}
      VERSION: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: version
        name: Compute next tag (patch bump)
        shell: bash
        run: |
          git fetch --tags
          LATEST_TAG="$(git tag --list 'v*' --sort=-v:refname | head -n1)"
          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="v0.1.0"
          else
            V="${LATEST_TAG#v}"
            IFS='.' read -r MA MI PA <<< "$V"
            : "${MA:=0}" ; : "${MI:=1}" ; : "${PA:=0}"
            PA=$((PA+1))
            NEXT_TAG="v${MA}.${MI}.${PA}"
          fi
          echo "tag=${NEXT_TAG}"       >> "$GITHUB_OUTPUT"
          echo "version=${NEXT_TAG#v}" >> "$GITHUB_OUTPUT"
      - name: Create and push git tag
        shell: bash
        run: |
          TAG_NAME="${{ steps.version.outputs.tag }}"
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} já existe; seguindo."
          else
            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
            git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}"
            git push origin "${TAG_NAME}"
          fi

  release-macos:
    name: macOS • DMG drag-app Installer
    runs-on: macos-latest
    needs: tag
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with: { go-version: '1.22', cache: true }

      - name: Build darwin/amd64
        env: { GOOS: darwin, GOARCH: amd64, CGO_ENABLED: 0 }
        run: |
          mkdir -p dist
          go build -trimpath -ldflags="-s -w -X main.version=${{ needs.tag.outputs.VERSION }}" -o dist/${APP_NAME}_amd64 ${MAIN_PKG}
      - name: Build darwin/arm64
        env: { GOOS: darwin, GOARCH: arm64, CGO_ENABLED: 0 }
        run: |
          go build -trimpath -ldflags="-s -w -X main.version=${{ needs.tag.outputs.VERSION }}" -o dist/${APP_NAME}_arm64 ${MAIN_PKG}
      - name: Create universal binary (lipo)
        run: |
          lipo -create -output dist/${APP_NAME} dist/${APP_NAME}_amd64 dist/${APP_NAME}_arm64
          chmod +x dist/${APP_NAME}
          file dist/${APP_NAME}

      - name: Build "Seidor AWS CLI Installer.app" (AppleScript)
        run: |
          mkdir -p mac/Installer-src
          cat > mac/Installer-src/installer.applescript <<'APPLESCRIPT'
          on run
            set appBundlePath to POSIX path of (path to me)
            set binSource to appBundlePath & "Contents/Resources/seidor-aws-cli"
            set targetDir to "/usr/local/bin"
            try
              do shell script "mkdir -p " & quoted form of targetDir with administrator privileges
              do shell script "install -m 0755 " & quoted form of binSource & " " & quoted form of (targetDir & "/seidor-aws-cli") with administrator privileges
              do shell script "xattr -d com.apple.quarantine " & quoted form of (targetDir & "/seidor-aws-cli") & " || true" with administrator privileges
              display dialog "Seidor AWS CLI instalado em " & targetDir buttons {"OK"} default button 1 with icon note
            on error errMsg number errNum
              display dialog "Falha na instalação: " & errMsg buttons {"OK"} default button 1 with icon stop
            end try
          end run
          APPLESCRIPT
          osacompile -o "Seidor AWS CLI Installer.app" mac/Installer-src/installer.applescript
          # Embed o binário universal no app (Resources)
          mkdir -p "Seidor AWS CLI Installer.app/Contents/Resources"
          cp dist/${APP_NAME} "Seidor AWS CLI Installer.app/Contents/Resources/seidor-aws-cli"

      - name: Create DMG (drag-to-Applications)
        run: |
          mkdir -p dmgroot
          cp -R "Seidor AWS CLI Installer.app" dmgroot/
          ln -s /Applications dmgroot/Applications
          DMG="dist/${APP_NAME}_${{ needs.tag.outputs.VERSION }}_macOS_Installer.dmg"
          hdiutil create -volname "${VOL_NAME}" -srcfolder dmgroot -ov -format UDZO "$DMG"
          echo "DMG_PATH=$DMG" >> $GITHUB_ENV

      - name: Checksums
        run: |
          shasum -a 256 "$DMG_PATH" > "${DMG_PATH}.sha256"
          cat "${DMG_PATH}.sha256"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.TAG_NAME }}
          name: ${{ needs.tag.outputs.TAG_NAME }}
          generate_release_notes: true
          files: |
            ${{ env.DMG_PATH }}
            ${{ env.DMG_PATH }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-linux-rpm:
    name: Linux • RPM (x86_64 & aarch64)
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with: { go-version: '1.22', cache: true }

      - name: Build linux/amd64
        env: { GOOS: linux, GOARCH: amd64, CGO_ENABLED: 0 }
        run: |
          mkdir -p dist pkg/linux/amd64
          go build -trimpath -ldflags="-s -w -X main.version=${{ needs.tag.outputs.VERSION }}" -o dist/${APP_NAME}_linux_amd64 ${MAIN_PKG}
          cp dist/${APP_NAME}_linux_amd64 pkg/linux/amd64/${APP_NAME}
      - name: Build linux/arm64
        env: { GOOS: linux, GOARCH: arm64, CGO_ENABLED: 0 }
        run: |
          mkdir -p pkg/linux/arm64
          go build -trimpath -ldflags="-s -w -X main.version=${{ needs.tag.outputs.VERSION }}" -o dist/${APP_NAME}_linux_arm64 ${MAIN_PKG}
          cp dist/${APP_NAME}_linux_arm64 pkg/linux/arm64/${APP_NAME}

      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems rpm
          sudo gem install --no-document fpm

      - name: Package RPM (x86_64)
        run: |
          fpm -s dir -t rpm \
            -n ${APP_NAME} -v ${{ needs.tag.outputs.VERSION }} \
            -a x86_64 --license MIT \
            --description "Seidor AWS CLI" \
            --vendor "${{ github.repository_owner }}" \
            --url "https://github.com/${{ github.repository }}" \
            pkg/linux/amd64/${APP_NAME}=/usr/local/bin/${APP_NAME}
          mv ${APP_NAME}-${{ needs.tag.outputs.VERSION }}-1.x86_64.rpm dist/${APP_NAME}_${{ needs.tag.outputs.VERSION }}_linux_x86_64.rpm

      - name: Package RPM (aarch64)
        run: |
          fpm -s dir -t rpm \
            -n ${APP_NAME} -v ${{ needs.tag.outputs.VERSION }} \
            -a aarch64 --license MIT \
            --description "Seidor AWS CLI" \
            --vendor "${{ github.repository_owner }}" \
            --url "https://github.com/${{ github.repository }}" \
            pkg/linux/arm64/${APP_NAME}=/usr/local/bin/${APP_NAME}
          mv ${APP_NAME}-${{ needs.tag.outputs.VERSION }}-1.aarch64.rpm dist/${APP_NAME}_${{ needs.tag.outputs.VERSION }}_linux_aarch64.rpm

      - name: Checksums + Upload
        run: |
          cd dist
          shasum -a 256 ${APP_NAME}_${{ needs.tag.outputs.VERSION }}_linux_x86_64.rpm > ${APP_NAME}_${{ needs.tag.outputs.VERSION }}_linux_x86_64.rpm.sha256
          shasum -a 256 ${APP_NAME}_${{ needs.tag.outputs.VERSION }}_linux_aarch64.rpm > ${APP_NAME}_${{ needs.tag.outputs.VERSION }}_linux_aarch64.rpm.sha256
        shell: bash
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.TAG_NAME }}
          name: ${{ needs.tag.outputs.TAG_NAME }}
          files: |
            dist/${{ env.APP_NAME }}_${{ needs.tag.outputs.VERSION }}_linux_x86_64.rpm
            dist/${{ env.APP_NAME }}_${{ needs.tag.outputs.VERSION }}_linux_x86_64.rpm.sha256
            dist/${{ env.APP_NAME }}_${{ needs.tag.outputs.VERSION }}_linux_aarch64.rpm
            dist/${{ env.APP_NAME }}_${{ needs.tag.outputs.VERSION }}_linux_aarch64.rpm.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-windows:
    name: Windows • NSIS installers (x64 & ARM64)
    runs-on: windows-latest
    needs: tag
    env:
      VERSION: ${{ needs.tag.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with: { go-version: '1.22', cache: true }

      - name: Build windows/amd64
        shell: bash
        env: { GOOS: windows, GOARCH: amd64, CGO_ENABLED: 0 }
        run: |
          mkdir -p dist
          go build -trimpath -ldflags="-s -w -X main.version=${VERSION}" -o dist/${APP_NAME}_windows_amd64.exe ${MAIN_PKG}

      - name: Build windows/arm64
        shell: bash
        env: { GOOS: windows, GOARCH: arm64, CGO_ENABLED: 0 }
        run: |
          go build -trimpath -ldflags="-s -w -X main.version=${VERSION}" -o dist/${APP_NAME}_windows_arm64.exe ${MAIN_PKG}

      - name: Install NSIS
        run: choco install nsis -y

      - name: Generate NSIS scripts
        shell: pwsh
        run: |
          $nsis = @'
          !define APP_NAME "Seidor AWS CLI"
          !define BIN_NAME "seidor-aws-cli.exe"
          !define COMPANY  "${{ github.repository_owner }}"
          !define VERSION  "${{ env.VERSION }}"
          !define URL      "https://github.com/${{ github.repository }}"
          !include "MUI2.nsh"
          !include "FileFunc.nsh"
          !include "LogicLib.nsh"

          !define MUI_ABORTWARNING
          !define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\win-install.ico"
          !define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\win-uninstall.ico"

          RequestExecutionLevel admin

          Var Arch
          !macro MakeInstaller ARCH BINPATH OUTFILE
            OutFile "${OUTFILE}"
            InstallDir "$PROGRAMFILES64\Seidor AWS CLI"
            Name "${APP_NAME} (${ARCH})"
            BrandingText "Seidor AWS CLI ${VERSION} (${ARCH})"

            !insertmacro MUI_PAGE_WELCOME
            !insertmacro MUI_PAGE_DIRECTORY
            !insertmacro MUI_PAGE_INSTFILES
            !insertmacro MUI_PAGE_FINISH

            !insertmacro MUI_UNPAGE_CONFIRM
            !insertmacro MUI_UNPAGE_INSTFILES

            !insertmacro MUI_LANGUAGE "English"

            Section "Install"
              SetOutPath "$INSTDIR"
              File "${BINPATH}"
              Rename "$INSTDIR\${APP_NAME}_${VERSION}_windows_${ARCH}.exe" "$INSTDIR\${BIN_NAME}"

              ; Add to PATH (system)
              ReadRegStr $0 HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path"
              StrLen $1 "$0"
              StrCpy $2 ";$INSTDIR"
              StrLen $3 "$2"
              ; If not already present, append
              ${IfThen} $1 == 0 ${|} WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path" "$INSTDIR" ${|}
              ${If} $1 > 0
                StrCpy $4 "$0$2"
                WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path" "$4"
              ${EndIf}
              ; Broadcast change
              System::Call 'USER32::SendMessageTimeout(p 0xffff, i ${WM_SETTINGCHANGE}, p 0, t "Environment", i 0x0000, i 5000, *i .r0)'

              CreateShortCut "$SMPROGRAMS\Seidor AWS CLI\Seidor AWS CLI.lnk" "$INSTDIR\${BIN_NAME}"
            SectionEnd

            Section "Uninstall"
              Delete "$INSTDIR\${BIN_NAME}"
              RMDir /r "$SMPROGRAMS\Seidor AWS CLI"
              RMDir "$INSTDIR"
              ; Best-effort: PATH cleanup (not perfect)
              ReadRegStr $0 HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path"
              ${If} $0 != ""
                StrRep $1 "$0" ";$INSTDIR" ""
                WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "Path" "$1"
                System::Call 'USER32::SendMessageTimeout(p 0xffff, i ${WM_SETTINGCHANGE}, p 0, t "Environment", i 0x0000, i 5000, *i .r0)'
              ${EndIf}
            SectionEnd
          !macroend
          '@

          $scriptX64 = $nsis + @'
          !define OUTFILE "dist\seidor-aws-cli_${{ env.VERSION }}_windows_x64_setup.exe"
          !insertmacro MakeInstaller "x64" "dist\seidor-aws-cli_windows_amd64.exe" "${OUTFILE}"
          '@
          $scriptARM = $nsis + @'
          !define OUTFILE "dist\seidor-aws-cli_${{ env.VERSION }}_windows_arm64_setup.exe"
          !insertmacro MakeInstaller "arm64" "dist\seidor-aws-cli_windows_arm64.exe" "${OUTFILE}"
          '@

          Set-Content -Path installer_x64.nsi -Value $scriptX64 -Encoding ASCII
          Set-Content -Path installer_arm64.nsi -Value $scriptARM -Encoding ASCII

      - name: Build NSIS installers
        shell: pwsh
        run: |
          & 'C:\Program Files (x86)\NSIS\makensis.exe' /V2 installer_x64.nsi
          & 'C:\Program Files (x86)\NSIS\makensis.exe' /V2 installer_arm64.nsi
          Get-ChildItem dist\*.exe

      - name: Checksums
        shell: pwsh
        run: |
          Get-FileHash -Algorithm SHA256 "dist\seidor-aws-cli_${env:VERSION}_windows_x64_setup.exe" | ForEach-Object { "$($_.Hash)  $($_.Path)" } | Out-File -Encoding ASCII "dist\seidor-aws-cli_${env:VERSION}_windows_x64_setup.exe.sha256"
          Get-FileHash -Algorithm SHA256 "dist\seidor-aws-cli_${env:VERSION}_windows_arm64_setup.exe" | ForEach-Object { "$($_.Hash)  $($_.Path)" } | Out-File -Encoding ASCII "dist\seidor-aws-cli_${env:VERSION}_windows_arm64_setup.exe.sha256"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.TAG_NAME }}
          name: ${{ needs.tag.outputs.TAG_NAME }}
          files: |
            dist/seidor-aws-cli_${{ env.VERSION }}_windows_x64_setup.exe
            dist/seidor-aws-cli_${{ env.VERSION }}_windows_x64_setup.exe.sha256
            dist/seidor-aws-cli_${{ env.VERSION }}_windows_arm64_setup.exe
            dist/seidor-aws-cli_${{ env.VERSION }}_windows_arm64_setup.exe.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
